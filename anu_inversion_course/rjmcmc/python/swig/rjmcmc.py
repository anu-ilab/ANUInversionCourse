# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rjmcmc
else:
    import _rjmcmc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def rjmcmc_seed(s):
    return _rjmcmc.rjmcmc_seed(s)
class dataset1d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    d = property(_rjmcmc.dataset1d_d_get, _rjmcmc.dataset1d_d_set)

    def __init__(self, *args):
        _rjmcmc.dataset1d_swiginit(self, _rjmcmc.new_dataset1d(*args))

    def set_xrange(self, xmin, xmax):
        return _rjmcmc.dataset1d_set_xrange(self, xmin, xmax)

    def get_xmin(self):
        return _rjmcmc.dataset1d_get_xmin(self)

    def get_xmax(self):
        return _rjmcmc.dataset1d_get_xmax(self)

    def set_yrange(self, ymin, ymax):
        return _rjmcmc.dataset1d_set_yrange(self, ymin, ymax)

    def get_ymin(self):
        return _rjmcmc.dataset1d_get_ymin(self)

    def get_ymax(self):
        return _rjmcmc.dataset1d_get_ymax(self)

    def set_lambda_std(self, std):
        return _rjmcmc.dataset1d_set_lambda_std(self, std)

    def get_lambda_std(self):
        return _rjmcmc.dataset1d_get_lambda_std(self)

    def set_lambda_range(self, lambdamin, lambdamax):
        return _rjmcmc.dataset1d_set_lambda_range(self, lambdamin, lambdamax)

    def get_lambda_min(self):
        return _rjmcmc.dataset1d_get_lambda_min(self)

    def get_lambda_max(self):
        return _rjmcmc.dataset1d_get_lambda_max(self)
    __swig_destroy__ = _rjmcmc.delete_dataset1d

# Register dataset1d in _rjmcmc:
_rjmcmc.dataset1d_swigregister(dataset1d)

class resultset1d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_rjmcmc.resultset1d_r_get, _rjmcmc.resultset1d_r_set)
    __swig_destroy__ = _rjmcmc.delete_resultset1d

    def proposed(self):
        return _rjmcmc.resultset1d_proposed(self)

    def acceptance(self):
        return _rjmcmc.resultset1d_acceptance(self)

    def partitions(self):
        return _rjmcmc.resultset1d_partitions(self)

    def order_histogram(self):
        return _rjmcmc.resultset1d_order_histogram(self)

    def partition_histogram(self):
        return _rjmcmc.resultset1d_partition_histogram(self)

    def partition_location_histogram(self):
        return _rjmcmc.resultset1d_partition_location_histogram(self)

    def x(self):
        return _rjmcmc.resultset1d_x(self)

    def y(self):
        return _rjmcmc.resultset1d_y(self)

    def mean(self):
        return _rjmcmc.resultset1d_mean(self)

    def median(self):
        return _rjmcmc.resultset1d_median(self)

    def mode(self):
        return _rjmcmc.resultset1d_mode(self)

    def credible_min(self):
        return _rjmcmc.resultset1d_credible_min(self)

    def credible_max(self):
        return _rjmcmc.resultset1d_credible_max(self)

    def misfit(self):
        return _rjmcmc.resultset1d_misfit(self)

    def lambda_history(self):
        return _rjmcmc.resultset1d_lambda_history(self)

    def histogram(self):
        return _rjmcmc.resultset1d_histogram(self)

    def __init__(self):
        r"""__init__(resultset1d self) -> resultset1d"""
        _rjmcmc.resultset1d_swiginit(self, _rjmcmc.new_resultset1d())

# Register resultset1d in _rjmcmc:
_rjmcmc.resultset1d_swigregister(resultset1d)

class resultset1dfm(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    r = property(_rjmcmc.resultset1dfm_r_get, _rjmcmc.resultset1dfm_r_set)
    __swig_destroy__ = _rjmcmc.delete_resultset1dfm

    def proposed(self):
        return _rjmcmc.resultset1dfm_proposed(self)

    def acceptance(self):
        return _rjmcmc.resultset1dfm_acceptance(self)

    def partitions(self):
        return _rjmcmc.resultset1dfm_partitions(self)

    def partition_histogram(self):
        return _rjmcmc.resultset1dfm_partition_histogram(self)

    def partition_location_histogram(self):
        return _rjmcmc.resultset1dfm_partition_location_histogram(self)

    def x(self):
        return _rjmcmc.resultset1dfm_x(self)

    def mean(self, li=0):
        return _rjmcmc.resultset1dfm_mean(self, li)

    def median(self, li=0):
        return _rjmcmc.resultset1dfm_median(self, li)

    def mode(self, li=0):
        return _rjmcmc.resultset1dfm_mode(self, li)

    def credible_min(self, li=0):
        return _rjmcmc.resultset1dfm_credible_min(self, li)

    def credible_max(self, li=0):
        return _rjmcmc.resultset1dfm_credible_max(self, li)

    def global_parameter(self, gi):
        return _rjmcmc.resultset1dfm_global_parameter(self, gi)

    def misfit(self):
        return _rjmcmc.resultset1dfm_misfit(self)

    def __init__(self):
        r"""__init__(resultset1dfm self) -> resultset1dfm"""
        _rjmcmc.resultset1dfm_swiginit(self, _rjmcmc.new_resultset1dfm())

# Register resultset1dfm in _rjmcmc:
_rjmcmc.resultset1dfm_swigregister(resultset1dfm)


def regression_single1d(dataset, burnin=10000, total=50000, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_single1d(dataset1d dataset, int burnin=10000, int total=50000, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_single1d(dataset, burnin, total, max_order, xsamples, ysamples, credible_interval)

def regression_single1d_sampled(dataset, callback, burnin=10000, total=50000, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_single1d_sampled(dataset1d dataset, PyObject * callback, int burnin=10000, int total=50000, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_single1d_sampled(dataset, callback, burnin, total, max_order, xsamples, ysamples, credible_interval)

def regression_part1d_zero(dataset, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_part1d_zero(dataset1d dataset, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_zero(dataset, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)

def regression_part1d_natural(dataset, pv, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_part1d_natural(dataset1d dataset, double pv, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_natural(dataset, pv, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)

def regression_part1d(dataset, pd, burnin=10000, total=50000, max_partitions=20, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_part1d(dataset1d dataset, double pd, int burnin=10000, int total=50000, int max_partitions=20, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d(dataset, pd, burnin, total, max_partitions, max_order, xsamples, ysamples, credible_interval)

def regression_part1d_sampled(dataset, callback, pd, burnin=10000, total=50000, max_partitions=20, max_order=5, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""regression_part1d_sampled(dataset1d dataset, PyObject * callback, double pd, int burnin=10000, int total=50000, int max_partitions=20, int max_order=5, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1d"""
    return _rjmcmc.regression_part1d_sampled(dataset, callback, pd, burnin, total, max_partitions, max_order, xsamples, ysamples, credible_interval)

def forwardmodel_part1d(local_parameters, global_parameters, loglikelihood_cb, minx, maxx, pd, burnin=10000, total=50000, max_partitions=20, xsamples=100, ysamples=100, credible_interval=0.95):
    r"""forwardmodel_part1d(PyObject * local_parameters, PyObject * global_parameters, PyObject * loglikelihood_cb, double minx, double maxx, double pd, int burnin=10000, int total=50000, int max_partitions=20, int xsamples=100, int ysamples=100, double credible_interval=0.95) -> resultset1dfm"""
    return _rjmcmc.forwardmodel_part1d(local_parameters, global_parameters, loglikelihood_cb, minx, maxx, pd, burnin, total, max_partitions, xsamples, ysamples, credible_interval)


